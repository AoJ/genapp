#!/usr/bin/env node
/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap,__tryCatch=__rt.__tryCatch,__forIn=__rt.__forIn; (function main(_) { var __this = this; var __frame = { name: "main", line: 1 }; return __func(_, this, arguments, main, 0, __frame, function __$main() {





























































































































































































    return (function __1(_) { var argv, bundle, bundles, configFile, constructContext, context, contextFile, contextFolder, fgen, fs, fs_, gen, k, optimist, options, path, question, readline, realContext, rl, root, util, v, _i, _len, _ref, _ref1; fgen = require("fgen"); fs = require("fs"); fs_ = require("./fs_.js"); path = require("path"); util = require("util"); readline = require("readline"); optimist = require("optimist"); argv = optimist.usage("gen bundle [sub [sub...]] [-o DIR]\n\nEXAMPLES:\ngen node\ngen cs class").alias("o", "output").alias("h", "help")["default"]("o", "./").describe("o", "A destination folder where you want to generate to.").argv; return (function __$__1(_) { var __3 = argv.h; if (__3) { return _(null, __3); } ; var __4 = (argv._.length < 1); return _(null, __4); })(__cb(_, __frame, 0, 7, function ___(__0, __6) { return (function __$__1(__then) { if (__6) { optimist.showHelp(); process.exit(1); __then(); } else { __then(); } ; })(function __$__1() { options = { roots: [path.join(__dirname, "bundles"),] }; configFile = path.join((process.env["HOME"] || process.env["USERPROFILE"]), ".genappconfig"); return fs_.exists(configFile, __cb(_, __frame, 30, 6, function ___(__0, __7) { return (function __$__1(__then) { if (__7) { return fs.readFile(configFile, "utf8", __cb(_, __frame, 31, 31, function ___(__0, __8) { options.roots = JSON.parse(__8).roots.map(function(root) { return root.replace(/^~/, (process.env["HOME"] || process.env["USERPROFILE"])); }).concat(options.roots); __then(); }, true)); } else { __then(); } ; })(function __$__1() { bundles = { }; return options.roots.forEach_(__cb(_, __frame, 38, 2, function __$__1() { bundle = argv._[0]; if (!((bundle in bundles))) { if (/^__/.test(bundle)) { console.log("Bundle names cannot start with '__', please choose a different name."); } else { console.log((("Bundle '" + bundle) + "' does not exist in your current roots configuration.\n\nYour current roots are:")); _ref = options.roots; for (_i = 0, _len = _ref.length; (_i < _len); _i++) { root = _ref[_i]; console.log(root); }; } ; process.exit(1); } ; contextFolder = path.join(bundles[bundle], argv._.join("/___/")); return fs_.exists(contextFolder, __cb(_, __frame, 68, 7, function ___(__0, __10) { var __9 = !__10; return (function __$__1(__then) { if (__9) { console.log((((("Bundle '" + (argv._.join(" "))) + "' does not exist in root '") + bundles[bundle]) + "'.")); process.exit(1); __then(); } else { __then(); } ; })(function __$__1() { contextFile = path.join(contextFolder, "..", (argv._[(argv._.length - 1)] + ".js")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { context = require(contextFile); __then(); }); })(function ___(e, __result) { __tryCatch(_, function __$__1() { if (e) { console.log(((("Cannot read bundle '" + (argv._.join("/___/"))) + "' context file.\n\n") + e)); process.exit(1); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$__1() { question = function(query, callback) { return rl.question(query, function(answer) { return callback(null, answer); }); }; constructContext = function constructContext__2(key, val, ctx, prefix, _) { var answer, item, k, more, number, v, _ref1, _results; var __frame = { name: "constructContext__2", line: 89 }; return __func(_, this, arguments, constructContext__2, 4, __frame, function __$constructContext__2() { if ((prefix == null)) { prefix = ""; } ; return (function __$constructContext__2(__then) { if (Array.isArray(val)) { more = true; ctx[key] = []; console.log((("ctrl+c to quit '" + key) + "'")); rl.once("SIGINT", function() { more = false; rl.write(null, { ctrl: true, name: "u" }); rl.write(null, { ctrl: true, name: "k" }); return rl.write("\n"); }); return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$constructContext__2() { __more = false; var __11 = more; if (__11) { item = { }; ctx[key].push(item); _ref1 = val[0]; var __1 = __forIn(_ref1); var __2 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$constructContext__2() { __more = false; var __12 = (__2 < __1.length); if (__12) { k = __1[__2++]; v = _ref1[k]; return constructContext(k, v, item, (("" + key) + "> "), __cb(_, __frame, 27, 10, function __$constructContext__2() { while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$constructContext__2() { while (__more) { __loop(); }; __more = true; }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$constructContext__2() { return _(null, ctx[key].length = (ctx[key].length - 1)); }); } else { return (function __$constructContext__2(__then) { if ((typeof val === "function")) { return _(null, ctx[key] = val); } else { return (function __$constructContext__2(__then) { if (((typeof val === "object") && ((val != null)))) { item = { }; ctx[key] = item; _results = []; var __3 = __forIn(val); var __4 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$constructContext__2() { __more = false; var __14 = (__4 < __3.length); if (__14) { k = __3[__4++]; v = val[k]; return constructContext(k, v, item, (("" + key) + "> "), __cb(_, __frame, 39, 22, function ___(__0, __5) { _results.push(__5); while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$constructContext__2() { return _(null, _results); }); } else { return (function __$constructContext__2(__then) { if ((val != null)) { return (function __$constructContext__2(__break) { switch (typeof val) { case "string": return question(((("" + prefix) + key) + "? "), __cb(_, __frame, 45, 19, function ___(__0, __6) { answer = __6; return _(null, ctx[key] = answer); }, true)); case "number": return question(((("" + prefix) + key) + "? (number) "), __cb(_, __frame, 48, 19, function ___(__0, __7) { answer = __7; number = parseInt(answer); return (function __$constructContext__2(__then) { if (isNaN(number)) { console.log("It's not number."); return constructContext(key, val, ctx, prefix, __cb(_, __frame, 52, 19, _, true)); } else { return _(null, ctx[key] = number); } ; })(__break); }, true)); case "boolean": return question(((("" + prefix) + key) + "? (yes/no) "), __cb(_, __frame, 58, 19, function ___(__0, __9) { answer = __9.toLowerCase(); return (function __$constructContext__2(__then) { if ((answer === "yes")) { return _(null, ctx[key] = true); } else { return (function __$constructContext__2(__then) { if ((answer === "no")) { return _(null, ctx[key] = false); } else { console.log("yes or no please."); return constructContext(key, val, ctx, prefix, __cb(_, __frame, 65, 19, _, true)); } ; })(__then); } ; })(function __$constructContext__2() {  }); }, true)); default: return __break(); }; })(__then); } else { __then(); } ; })(__then); } ; })(__then); } ; })(__then); } ; })(_); }); }; rl = readline.createInterface({ input: process.stdin, output: process.stdout }); realContext = { }; _ref1 = context.context; var __4 = __forIn(_ref1); var __5 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$__1() { __more = false; var __17 = (__5 < __4.length); if (__17) { k = __4[__5++]; v = _ref1[k]; return constructContext(k, v, realContext, "", __cb(_, __frame, 169, 4, function __$__1() { while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$__1() { rl.close(); return (function __$__1(__then) { if ((typeof context.postProcess === "function")) { return context.postProcess(realContext, __cb(_, __frame, 175, 4, __then, true)); } else { __then(); } ; })(function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return fgen.createGenerator(contextFolder, __cb(_, __frame, 179, 10, function ___(__0, __11) { gen = __11; gen.context = realContext; return gen.generateAll(argv.output, function(k) { return !/^___(\/|\\)/.test(k); }, __cb(_, __frame, 181, 4, function __$__1() { console.log("done."); __then(); }, true)); }, true)); }); })(function ___(e, __result) { __tryCatch(_, function __$__1() { if (e) { console.log(); console.log(e.message); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); }); }); }); }); }, true)); }, true), function __1(_, root) { var __frame = { name: "__1", line: 39 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return fs_.exists(root, __cb(_, __frame, 1, 8, function ___(__0, __2) { return (function __$__1(__then) { if (__2) { return fs.readdir(root, __cb(_, __frame, 2, 13, function ___(__0, __4) { return __4.filter_(__cb(_, __frame, 2, 13, function ___(__0, __5) { var __3 = __5.forEach(function(folder) { if ((!/^__/.test(folder) && !((folder in bundles)))) { return bundles[folder] = root; } ; }); return _(null, __3); }, true), -1, function __1(_, file) { var __frame = { name: "__1", line: 41 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return fs.stat(path.join(root, file), __cb(_, __frame, 1, 15, function ___(__0, __2) { var __1 = __2.isDirectory(); return _(null, __1); }, true)); }); }); }, true)); } else { __then(); } ; })(_); }, true)); }); }); }); }, true)); }); }, true)); })(__cb(_, __frame, 190, 0, _, true)); });}).call(this, __trap);